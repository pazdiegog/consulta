#include <iostream>
#include <fstream>
#include <string>
#include <array>


using namespace std;
//funcion que intercambia

void print(int *array, int tope)
	{
		for (int i=0; i<tope ; i++)
			cout<<i<<":"<<array[i]<<endl;
	}
int trade(int *array, int start, int end)
	{
		int left;
		int right;
		int pivot;
		int temp;

	pivot = array[end];
	right = end-1;
	left = start;
	
	//mientras no se cruzen los indices
		while (left < right)
		{	while (array[right]>pivot)
				right--;
			while (array[left]<=pivot)
				left++;
		
		if (left < right) //para no intercambiar con los indices cruzados.
			{
			temp=array[left];
			array[left]=array[right];
			array[right]=temp;
			}
		}
		//cuando se cruzan los indices intercambios el pivot con el slot de los indices cruzados.
		temp= array[right];
		array[right]=array[end];
		array[end]=temp;
		
		//retorno la posicion del pivot
		return right;

	}
//funcion recursiva
void quicksort (int *array, int left, int right)
{
	int pivot;
	int tope = 13;
	if (left < right)//0 < 10
	{
		pivot = trade(array, left, right);

		quicksort(array, left, pivot-1); //sublista izquierda
		cout << "pivot: " << pivot <<"\n";
		cout << "sublista izquierda\n";
		print (array, tope);
		quicksort(array, pivot+1, right); //sublista derecha
	}

	//tomar como pivot el ultimo elemento, pivot = tope
	//tomar left=tope-tope y right=tope-1
	//comparo left con pivot y right con pivot
	//si left es mayor que pivot y right es menor que pivot entonces trade y left=left++ y right=right--
	//si left es menor que pivot entonces left++
	//si right es mayor que pivot entonces right--
	//si left=right entonces trade entre left o right, con pivot
		//sublista izquierda
		//tomar pivot=pivot-1, tomar right=pivot - 1, tomar left=pivot-pivot
		//se repite desde paso 3.
			//sublista derecha		
			//tomar left=pivot+1, tomar pivot=tope, tomar right=tope-1
} 			//se repite desde paso 3


int main ()
{	int const tope = 13;
	int array[tope];
	array [0]= 8;
	array [1]= 1;
	array [2]= 5;
	array [3]= 14;
	array [4]= 4;
	array [5]= 15;
	array [6]= 12;
	array [7]= 6;
	array [8]= 2;
	array [9]= 11;
	array [10]=10;
	array [11]=7;
	array [12]=9;
void print(int *array, int tope);

	print (array, tope);
	quicksort (array, 0, tope - 1);
	cout<< "\nOrdenado:\n";
	print (array, tope);	
}
