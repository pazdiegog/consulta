#include <iostream>
#include <fstream>
#include <string>
#include <array>


using namespace std;
//funcion que intercambia
int trade(int *array, int start, int end)
	{
		int left;
		int right;
		int pivot;
		int temp;

	pivot = array[end];
	right = end;
	left = start;
	
	//mientras no se cruzen los indices
		while (left < right)
		{	if ((array[right] < pivot) && (array[left] > pivot))
			{
				temp= array[left];
				array[left]=array[right];
				array[right]=temp;
			}
			if (array[right] > pivot )
				right--;
			if ((array[left] < pivot))
				left++;
		}
	//intercambio pivot al lugar que corresponde
	temp = array[left];
	array[left] = array[end];
	array[end] = temp;
	return left;
	}
//funcion recursiva
void quicksort (int *array, int left, int right)
{
	int pivot;
	
	if (left < right)//0 < 10
	{
		pivot = trade(array, left, right);

		quicksort(array, left, pivot-1); //sublista izquierda
		quicksort(array, pivot+1, right); //sublista derecha
	}

	//tomar como pivot el ultimo elemento, pivot = tope
	//tomar left=tope-tope y right=tope-1
	//comparo left con pivot y right con pivot
	//si left es mayor que pivot y right es menor que pivot entonces trade y left=left++ y right=right--
	//si left es menor que pivot entonces left++
	//si right es mayor que pivot entonces right--
	//si left=right entonces trade entre left o right, con pivot
		//sublista izquierda
		//tomar pivot=pivot-1, tomar right=pivot - 1, tomar left=pivot-pivot
		//se repite desde paso 3.
			//sublista derecha		
			//tomar left=pivot+1, tomar pivot=tope, tomar right=tope-1
} 			//se repite desde paso 3


int main ()
{	int const tope = 10;
	int array[tope];
	array [0]= 9;
	array [1]= 4;
	array [2]= 3;
	array [3]= 1;
	array [4]= 6;
	array [5]= 7;
	array [6]= 2;
	array [7]= 5;
	array [8]= 8;
	array [9]= 0;
	
	for (int i=0; i < tope ; i++)
		cout<<i<<":"<<array[i]<<endl;
	quicksort (array, 0, tope - 1);
	for (int i=0; i < tope ; i++)
		cout<<i<<":"<<array[i]<<endl;	
}
