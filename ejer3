#include <iostream>
#include <fstream>
#include <string>
#include <array>


using namespace std;

ifstream in;

typedef struct  {
	string agrupacion;
	string candidato;
	int lista;
	int votos;
}Listado;
const unsigned int MAX = 10 * 3;
array<Listado , MAX> senadores, diputados;
Listado r;
string GetNombreDeArchivoDeMesa(string UnaMesa)
{
	return "Mesa" + UnaMesa + ".txt";
}

string UnaMesa;

int main()
{
	cout << "Seleccione el numero de mesa: ";
	cin >> UnaMesa;
	void SumarLosVotos();
	void MostrarListados(array <Listado, MAX> &a);
	//void CalcularEInformarLasEstadisticas();
	SumarLosVotos();
	MostrarListados(senadores);
	cin >> UnaMesa; //congelar la pantalla y evitar que termine
}
////////////////////////////////////////////////////////////////////////////////////////////////
/*
*/void PonerEnCeroLosVotos(array<Listado,MAX> &a)
{
	for (int i = 0; i<MAX; ++i)
		a.at(i).votos = 0;
}

void PonerEnCeroLosVotosDeSenadoresYDiputados()
{
	PonerEnCeroLosVotos(senadores);
	PonerEnCeroLosVotos(diputados);
}
////////////////////////////////////////////////////////////////////////////////////////////////
void SaltearLineas(ifstream& in)
{ 
	string line;
	getline(in,line);
	cout << line << "\n";
}
void SaltearVotosEnBlancoEImpugnados(ifstream& in)
{	
		SaltearLineas(in);
		SaltearLineas(in);
		SaltearLineas(in);
}

void SumarLosVotosDeUnArchivo(string nombreDeArchivo)
{
	in.open(GetNombreDeArchivoDeMesa(UnaMesa));
	void AvanzarHastaSenadores();
	void SumarVotosDeSenadores();
	void AvanzarHastaDiputados();
	void SumarVotosDeDiputados();
	AvanzarHastaSenadores();
	SumarVotosDeSenadores();
	SaltearVotosEnBlancoEImpugnados(in);
//	AvanzarHastaDiputados();
//	SumarVotosDeDiputados();
	in.close();
}



Listado LeerRegistro(ifstream& in)
{
	in
		>> r.agrupacion
		>> r.lista
		>> r.candidato
		>> r.votos;
	return r;
}

void SumarVotosDeUnCargo(array <Listado, MAX>& a,ifstream& in);

void SumarVotosDeSenadores()
{
	SumarVotosDeUnCargo(senadores,in);
	
}
/*
void SumarVotosDeDiputados()
{
	SumarVotosDeUnCargo(diputados,in);
}
*/
void AvanzarHastaSenadores()
{
	SaltearLineas(in); //TODO: Qu√© se leyo?
	SaltearLineas(in);
	SaltearLineas(in);
}
/*
void AvanzarHastaDiputados()
{
	SaltearLineas(in);
	SaltearLineas(in);
	SaltearLineas(in);
}
*/
void SumarLosVotosDeLosArchivos()
{
	string UnaMesa="4568"; // TODO:cinco veces por cada archivo
	SumarLosVotosDeUnArchivo(UnaMesa);
}

void SumarLosVotos()
{
	PonerEnCeroLosVotosDeSenadoresYDiputados();
	SumarLosVotosDeLosArchivos();
}

void SumarVotosDeUnCargo(array <Listado, MAX> &a,ifstream& in)
{
	for (unsigned i = 0; i < MAX; ++i)
	{
		r = LeerRegistro(in);
		SaltearLineas(in);
		a.at(i).agrupacion = r.agrupacion;
		a.at(i).lista = r.lista;
		a.at(i).candidato = r.candidato;
		a.at(i).votos += r.votos;
	}

}

void ImprimirArreglo(const array<Listado, MAX> &a)
{
	for (unsigned i = 0; i < MAX; ++i)
		cout << a[i].agrupacion<<"\t"
		<< a[i].lista<<"\t"
		<< a[i].candidato<<"\t"
		<< a[i].votos<<"\t\n";
}
/*
void OrdenarPorVoto (array <Listado, MAX> &a) //burbuja
{
for (int i=0; i<MAX-1; i++)
	for (int j=0; j<MAX-1; j++)
		if (a[j].votos > a[j+1].votos)
		{
			Listado aux;
			aux=a[j];
			a[j]=a[j+1];
			a[j+1]=aux;
		}

}
*/
void OrdenarPorAgrupacion (array <Listado, MAX> &a) //burbuja
{
for (int i=0; i<MAX-1; i++)
	for (int j=0; j<MAX-1; j++)
		if (a[j].agrupacion > a [j+1].agrupacion)
		{
			Listado aux;
			aux=a[j];
			a[j]=a[j+1];
			a[j+1]=aux;
		}

}
void OrdenarPorCandidato (array <Listado, MAX> &a) //insercion
{
	int j;
	string temp;
	for (int i=0; i<MAX; i++)
	{	
		temp= a[i].candidato;
		j= i-1;
		while ((j>=0) && (a[j].candidato> temp))
		{
			a[j+1]=a[j];
			j--;
		}
		a[j+1].candidato = temp;
	}

}
void MostrarListado1(array <Listado, MAX> &a) 
{
	OrdenarPorAgrupacion(a);
	cout << "Senadores ordenados por agrupacion: \n";
	ImprimirArreglo(a);
	
	cout << "\nSenadores ordenados por candidato: \n";
	OrdenarPorCandidato(a);
	ImprimirArreglo(a);
//	ImprimirArreglo(diputados);
}

void MostrarListados(array <Listado, MAX> &a) 
{
	MostrarListado1 (a);
}


/*

void OrdenarPorLista (array <Listado, MAX> &a) //shell
{
	for (int i=MAX/2; i !=0; i/=2)
		for (int j=1; j!=0;)
		{
			j=0;
			for (int k=i; k<MAX;k++)
				if (a[k-i].lista>a[k].lista)
				{
					Listado temp=a[k];
					a[k]=a[k-i];
					a[k-i]=temp;
					j++;
				}
		}
	ImprimirArreglo (a);
}

*/


/*
void OrdenarPorAgrupacionYVotos()
{

}


void OrdenarPorCandidatosYVotos()
{

}*/
